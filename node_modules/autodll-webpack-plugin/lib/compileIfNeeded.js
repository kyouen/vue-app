'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compile = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _isEmpty = require('lodash/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _fs = require('./utils/fs');

var _fs2 = _interopRequireDefault(_fs);

var _makeDir = require('make-dir');

var _makeDir2 = _interopRequireDefault(_makeDir);

var _paths = require('./paths');

var _createLogger = require('./createLogger');

var _createLogger2 = _interopRequireDefault(_createLogger);

var _del = require('del');

var _del2 = _interopRequireDefault(_del);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isCacheValid = function isCacheValid(settings) {
  return (0, _makeDir2.default)(_paths.cacheDir).then(function () {
    return _fs2.default.statAsync(_path2.default.resolve(_paths.cacheDir, settings.hash));
  }).then(function () {
    return true;
  }).catch(function () {
    return false;
  });
};

var cleanup = function cleanup(settings) {
  return function () {
    return _fs2.default.readdirAsync(_paths.cacheDir).filter(function (dirname) {
      return dirname.startsWith(`${settings.env}_${settings.id}`);
    }).each(function (dirname) {
      return (0, _del2.default)(_path2.default.join(_paths.cacheDir, dirname));
    });
  };
};

var compile = exports.compile = function compile(settings, getCompiler) {
  return function () {
    // skip compiling if there is nothing to build
    if ((0, _isEmpty2.default)(settings.entry)) return;

    return new Promise(function (resolve, reject) {
      getCompiler().run(function (err, stats) {
        if (err) {
          return reject(err);
        }
        resolve(stats);
      });
    });
  };
};

var compileIfNeeded = function compileIfNeeded(settings, getCompiler) {
  var log = (0, _createLogger2.default)(settings.debug);

  return isCacheValid(settings).then(log.tap(function (isValid) {
    return `is valid cache? ${isValid}`;
  })).then(function (isValid) {
    if (isValid) return;

    return Promise.resolve().then(log.tap('cleanup')).then(cleanup(settings)).then(log.tap('compile')).then(compile(settings, getCompiler));
  });
};

exports.default = compileIfNeeded;