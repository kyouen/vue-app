'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getManifestPath = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webpack = require('webpack');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _compileIfNeeded = require('./compileIfNeeded');

var _compileIfNeeded2 = _interopRequireDefault(_compileIfNeeded);

var _createCompiler = require('./createCompiler');

var _createCompiler2 = _interopRequireDefault(_createCompiler);

var _paths = require('./paths');

var _index = require('./utils/index.js');

var _createSettings = require('./createSettings');

var _createSettings2 = _interopRequireDefault(_createSettings);

var _getInstanceIndex = require('./getInstanceIndex');

var _getInstanceIndex2 = _interopRequireDefault(_getInstanceIndex);

var _createMemory = require('./createMemory');

var _createMemory2 = _interopRequireDefault(_createMemory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var getManifestPath = exports.getManifestPath = function getManifestPath(hash) {
  return function (bundleName) {
    return _path2.default.resolve(_paths.cacheDir, hash, `${bundleName}.manifest.json`);
  };
};

var AutoDLLPlugin = function () {
  function AutoDLLPlugin(settings) {
    _classCallCheck(this, AutoDLLPlugin);

    this.originalSettings = settings;
  }

  _createClass(AutoDLLPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      var settings = (0, _createSettings2.default)({
        originalSettings: this.originalSettings,
        index: (0, _getInstanceIndex2.default)(compiler.options.plugins, this)
      });

      var context = settings.context,
          inject = settings.inject,
          entry = settings.entry;


      var getPublicPath = (0, _paths.createGetPublicPath)(compiler.options, settings.path);

      (0, _index.keys)(entry).map(getManifestPath(settings.hash)).forEach(function (manifestPath) {
        new _webpack.DllReferencePlugin({
          context: context,
          manifest: manifestPath
        }).apply(compiler);
      });

      compiler.plugin('before-compile', function (params, callback) {
        params.compilationDependencies = params.compilationDependencies.filter(function (path) {
          return !path.startsWith(_paths.cacheDir);
        });

        callback();
      });

      var onRun = function onRun(compiler, callback) {
        return (0, _compileIfNeeded2.default)(settings, function () {
          return (0, _createCompiler2.default)(settings);
        }).then(function () {
          return (0, _createMemory2.default)(settings.hash).then(function (memory) {
            _this.initialized = true;
            _this.memory = memory;
          });
        }).then(callback);
      };

      compiler.plugin('watch-run', onRun);
      compiler.plugin('run', onRun);

      compiler.plugin('emit', function (compilation, callback) {
        var memory = _this.memory;


        var assets = memory.getBundles().map(function (_ref) {
          var filename = _ref.filename,
              buffer = _ref.buffer;

          var relativePath = getPublicPath(filename, true);

          return {
            [relativePath]: {
              source: function source() {
                return buffer.toString();
              },
              size: function size() {
                return buffer.length;
              }
            }
          };
        });

        compilation.assets = _index.merge.apply(undefined, [compilation.assets].concat(_toConsumableArray(assets)));
        callback();
      });

      if (inject) {
        compiler.plugin('compilation', function (compilation) {
          compilation.plugin('html-webpack-plugin-before-html-generation', function (htmlPluginData, callback) {
            var memory = _this.memory;

            var bundlesPublicPaths = memory.getBundles().map(function (_ref2) {
              var filename = _ref2.filename;
              return getPublicPath(filename);
            });

            htmlPluginData.assets.js = (0, _index.concat)(bundlesPublicPaths, htmlPluginData.assets.js);

            callback(null, htmlPluginData);
          });
        });
      }
    }
  }]);

  return AutoDLLPlugin;
}();

exports.default = AutoDLLPlugin;