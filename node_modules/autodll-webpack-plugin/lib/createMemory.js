'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMemory = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _memoryFs = require('memory-fs');

var _memoryFs2 = _interopRequireDefault(_memoryFs);

var _fs = require('./utils/fs');

var _fs2 = _interopRequireDefault(_fs);

var _bluebird = require('bluebird');

var _paths = require('./paths');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getBundles = function getBundles(mfs) {
  return mfs.readdirSync('/').map(function (filename) {
    return {
      filename,
      buffer: mfs.readFileSync(`/${filename}`)
    };
  });
};

var createMemory = exports.createMemory = function createMemory(fs, cacheDir) {
  return function (hash) {
    var mfs = new _memoryFs2.default();

    return fs.readdirAsync(_path2.default.join(cacheDir, hash)).catch(function () {
      return [];
    }).filter(function (filename) {
      return _path2.default.extname(filename) === '.js';
    }).map(function (filename) {
      return (0, _bluebird.join)(filename, fs.readFileAsync(_path2.default.join(cacheDir, hash, filename)));
    }).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          filename = _ref2[0],
          buffer = _ref2[1];

      mfs.writeFileSync(`/${filename}`, buffer);
    }).then(function () {
      return {
        getBundles: getBundles.bind(null, mfs)
      };
    });
  };
};

exports.default = createMemory(_fs2.default, _paths.cacheDir);